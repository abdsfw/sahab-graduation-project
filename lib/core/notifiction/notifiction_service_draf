Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  if (Platform.isIOS) {
    await Firebase.initializeApp(
      options: const FirebaseOptions();
  } else {
    await Firebase.initializeApp();
  }
  log('Handling a background message ${message.messageId}');
}

const AndroidNotificationChannel channel = AndroidNotificationChannel(
    "hight_importance_channel", "High Importance Channel",
    importance: Importance.high);

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  if (Platform.isIOS) {
    await Firebase.initializeApp(
      options: const FirebaseOptions(
          apiKey: "AIzaSyBG7qc2Nkl66nSYRfQqA-K9UJaTHgN1QrA",
          authDomain: "qahwahhousefcb.firebaseapp.com",
          projectId: "qahwahhousefcb",
          storageBucket: "qahwahhousefcb.appspot.com",
          messagingSenderId: "809774832208",
          appId: "1:809774832208:ios:8710a990865c5425840f55"),
    );
  } else {
    await Firebase.initializeApp();
  }
  PushNotificationService().subscribeGenerals();

  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  await flutterLocalNotificationsPlugin
      .resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>()
      ?.createNotificationChannel(channel);

  if (defaultTargetPlatform == TargetPlatform.android) {
    AndroidGoogleMapsFlutter.useAndroidViewSurface = true;
  }
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  void initState() {
    super.initState();

    var initializationSettingsAndroid =
        const AndroidInitializationSettings("@mipmap/ic_launcher");
    var initializationSettingsIOS = const IOSInitializationSettings();
    var initializationSettings = InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    flutterLocalNotificationsPlugin.initialize(initializationSettings);

    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      int? orderId = message.data["order_id"];
      if (orderId != null) {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => OrderDetailsScreen(
              model: OrderModel(
                id: orderId,
                number: '',
                createdAt: DateTime.now(),
                status: 0,
                total: 0,
                paid: false,
              ),
            ),
          ),
        );
      } else {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => const SplashScreen(),
          ),
        );
      }
    });

    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      RemoteNotification? notification = message.notification;
      AndroidNotification? android = message.notification?.android;
      if (notification != null && android != null) {
        flutterLocalNotificationsPlugin.show(
          notification.hashCode,
          notification.title,
          notification.body,
          NotificationDetails(
            android: AndroidNotificationDetails(
              channel.id,
              channel.name,
              color: AppColors.qahwacolors,
              channelDescription: channel.description,
            ),
            iOS: const IOSNotificationDetails(),
          ),
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
    
//? noti screv    
import 'dart:convert';
import 'dart:developer';

import 'package:coffee_shop_app/auth/models/signin_response_model.dart';
import 'package:coffee_shop_app/utils/api.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:http/http.dart' as http;

class PushNotificationService {
  final FirebaseMessaging _fcm = FirebaseMessaging.instance;

  subscribeGenerals() {
    _fcm.subscribeToTopic("Generals");
  }

  sendPushNotificationsToken(SignInResponseModel? signInResponseModel) async {
    String? token = await _fcm.getToken();
    log("fcm token: $token");

    if (signInResponseModel == null) {
          await http.post(Uri.parse(Api.USER_FCM_TOKEN), body: json.encode({"token": token}));
    } else {
      await http.post(Uri.parse(Api.USER_FCM_AUTH_TOKEN),
          body: json.encode({"token": token}),
          headers: signInResponseModel.getAuthHeader());
    }
  }
}